{"ast":null,"code":"'use strict';\n\nconst {\n  Duplex\n} = require('stream');\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\n\n\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\n\n\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\n\n\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\n\n\nfunction createWebSocketStream(ws, options) {\n  let resumeOnReceiverDrain = true;\n  let terminateOnDestroy = true;\n\n  function receiverOnDrain() {\n    if (resumeOnReceiverDrain) ws._socket.resume();\n  }\n\n  if (ws.readyState === ws.CONNECTING) {\n    ws.once('open', function open() {\n      ws._receiver.removeAllListeners('drain');\n\n      ws._receiver.on('drain', receiverOnDrain);\n    });\n  } else {\n    ws._receiver.removeAllListeners('drain');\n\n    ws._receiver.on('drain', receiverOnDrain);\n  }\n\n  const duplex = new Duplex({ ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n  ws.on('message', function message(msg, isBinary) {\n    const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) {\n      resumeOnReceiverDrain = false;\n\n      ws._socket.pause();\n    }\n  });\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return; // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    } // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n\n\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {\n      resumeOnReceiverDrain = true;\n      if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n    }\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;","map":{"version":3,"names":["Duplex","require","emitClose","stream","emit","duplexOnEnd","destroyed","_writableState","finished","destroy","duplexOnError","err","removeListener","listenerCount","createWebSocketStream","ws","options","resumeOnReceiverDrain","terminateOnDestroy","receiverOnDrain","_socket","resume","readyState","CONNECTING","once","open","_receiver","removeAllListeners","on","duplex","autoDestroy","objectMode","writableObjectMode","message","msg","isBinary","data","_readableState","toString","push","pause","error","close","_destroy","callback","CLOSED","process","nextTick","called","terminate","_final","endEmitted","finish","_read","OPEN","needDrain","_write","chunk","encoding","send","module","exports"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/ws/lib/stream.js"],"sourcesContent":["'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let resumeOnReceiverDrain = true;\n  let terminateOnDestroy = true;\n\n  function receiverOnDrain() {\n    if (resumeOnReceiverDrain) ws._socket.resume();\n  }\n\n  if (ws.readyState === ws.CONNECTING) {\n    ws.once('open', function open() {\n      ws._receiver.removeAllListeners('drain');\n      ws._receiver.on('drain', receiverOnDrain);\n    });\n  } else {\n    ws._receiver.removeAllListeners('drain');\n    ws._receiver.on('drain', receiverOnDrain);\n  }\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) {\n      resumeOnReceiverDrain = false;\n      ws._socket.pause();\n    }\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {\n      resumeOnReceiverDrain = true;\n      if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n    }\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}