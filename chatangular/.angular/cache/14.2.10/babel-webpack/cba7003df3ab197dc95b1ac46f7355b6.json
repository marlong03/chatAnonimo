{"ast":null,"code":"'use strict';\n\nconst {\n  EMPTY_BUFFER\n} = require('./constants');\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\n\n\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n  return target;\n}\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\n\n\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\n\n\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\n\n\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\n\n\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n  if (Buffer.isBuffer(data)) return data;\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = {\n    concat,\n\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);else bufferUtil.mask(source, mask, output, offset, length);\n    },\n\n    toArrayBuffer,\n    toBuffer,\n\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);else bufferUtil.unmask(buffer, mask);\n    }\n\n  };\n} catch (e)\n/* istanbul ignore next */\n{\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}","map":{"version":3,"names":["EMPTY_BUFFER","require","concat","list","totalLength","length","target","Buffer","allocUnsafe","offset","i","buf","set","slice","_mask","source","mask","output","_unmask","buffer","toArrayBuffer","byteLength","byteOffset","toBuffer","data","readOnly","isBuffer","ArrayBuffer","from","isView","bufferUtil","module","exports","unmask","e"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/ws/lib/buffer-util.js"],"sourcesContent":["'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}