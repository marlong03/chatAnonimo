{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\n\nconst transport_1 = require(\"../transport\");\n\nconst zlib_1 = require(\"zlib\");\n\nconst accepts = require(\"accepts\");\n\nconst debug_1 = require(\"debug\");\n\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n  gzip: zlib_1.createGzip,\n  deflate: zlib_1.createDeflate\n};\n\nclass Polling extends transport_1.Transport {\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  constructor(req) {\n    super(req);\n    this.closeTimeout = 30 * 1000;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n\n  get supportsFraming() {\n    return false;\n  }\n  /**\n   * Overrides onRequest.\n   *\n   * @param req\n   *\n   * @api private\n   */\n\n\n  onRequest(req) {\n    const res = req.res;\n\n    if (req.getMethod() === \"get\") {\n      this.onPollRequest(req, res);\n    } else if (req.getMethod() === \"post\") {\n      this.onDataRequest(req, res);\n    } else {\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n    }\n  }\n  /**\n   * The client sends a request awaiting for us to send data.\n   *\n   * @api private\n   */\n\n\n  onPollRequest(req, res) {\n    if (this.req) {\n      debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n      this.onError(\"overlap from client\");\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n      return;\n    }\n\n    debug(\"setting request\");\n    this.req = req;\n    this.res = res;\n\n    const onClose = () => {\n      this.writable = false;\n      this.onError(\"poll connection closed prematurely\");\n    };\n\n    const cleanup = () => {\n      this.req = this.res = null;\n    };\n\n    req.cleanup = cleanup;\n    res.onAborted(onClose);\n    this.writable = true;\n    this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n    if (this.writable && this.shouldClose) {\n      debug(\"triggering empty send to append close packet\");\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n  }\n  /**\n   * The client sends a request with data.\n   *\n   * @api private\n   */\n\n\n  onDataRequest(req, res) {\n    if (this.dataReq) {\n      // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n      this.onError(\"data request overlap from client\");\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n      return;\n    }\n\n    const expectedContentLength = Number(req.headers[\"content-length\"]);\n\n    if (!expectedContentLength) {\n      this.onError(\"content-length header required\");\n      res.writeStatus(\"411 Length Required\").end();\n      return;\n    }\n\n    if (expectedContentLength > this.maxHttpBufferSize) {\n      this.onError(\"payload too large\");\n      res.writeStatus(\"413 Payload Too Large\").end();\n      return;\n    }\n\n    const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n\n    if (isBinary && this.protocol === 4) {\n      return this.onError(\"invalid content\");\n    }\n\n    this.dataReq = req;\n    this.dataRes = res;\n    let buffer;\n    let offset = 0;\n    const headers = {\n      // text/html is required instead of text/plain to avoid an\n      // unwanted download dialog on certain user-agents (GH-43)\n      \"Content-Type\": \"text/html\"\n    };\n    this.headers(req, headers);\n\n    for (let key in headers) {\n      res.writeHeader(key, String(headers[key]));\n    }\n\n    const onEnd = buffer => {\n      this.onData(buffer.toString());\n      this.onDataRequestCleanup();\n      res.end(\"ok\");\n    };\n\n    res.onAborted(() => {\n      this.onDataRequestCleanup();\n      this.onError(\"data request connection closed prematurely\");\n    });\n    res.onData((arrayBuffer, isLast) => {\n      const totalLength = offset + arrayBuffer.byteLength;\n\n      if (totalLength > expectedContentLength) {\n        this.onError(\"content-length mismatch\");\n        res.close(); // calls onAborted\n\n        return;\n      }\n\n      if (!buffer) {\n        if (isLast) {\n          onEnd(Buffer.from(arrayBuffer));\n          return;\n        }\n\n        buffer = Buffer.allocUnsafe(expectedContentLength);\n      }\n\n      Buffer.from(arrayBuffer).copy(buffer, offset);\n\n      if (isLast) {\n        if (totalLength != expectedContentLength) {\n          this.onError(\"content-length mismatch\");\n          res.writeStatus(\"400 Content-Length Mismatch\").end();\n          this.onDataRequestCleanup();\n          return;\n        }\n\n        onEnd(buffer);\n        return;\n      }\n\n      offset = totalLength;\n    });\n  }\n  /**\n   * Cleanup request.\n   *\n   * @api private\n   */\n\n\n  onDataRequestCleanup() {\n    this.dataReq = this.dataRes = null;\n  }\n  /**\n   * Processes the incoming data payload.\n   *\n   * @param {String} encoded payload\n   * @api private\n   */\n\n\n  onData(data) {\n    debug('received \"%s\"', data);\n\n    const callback = packet => {\n      if (\"close\" === packet.type) {\n        debug(\"got xhr close packet\");\n        this.onClose();\n        return false;\n      }\n\n      this.onPacket(packet);\n    };\n\n    if (this.protocol === 3) {\n      this.parser.decodePayload(data, callback);\n    } else {\n      this.parser.decodePayload(data).forEach(callback);\n    }\n  }\n  /**\n   * Overrides onClose.\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    if (this.writable) {\n      // close pending poll request\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n\n    super.onClose();\n  }\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Object} packet\n   * @api private\n   */\n\n\n  send(packets) {\n    this.writable = false;\n\n    if (this.shouldClose) {\n      debug(\"appending close packet to payload\");\n      packets.push({\n        type: \"close\"\n      });\n      this.shouldClose();\n      this.shouldClose = null;\n    }\n\n    const doWrite = data => {\n      const compress = packets.some(packet => {\n        return packet.options && packet.options.compress;\n      });\n      this.write(data, {\n        compress\n      });\n    };\n\n    if (this.protocol === 3) {\n      this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n    } else {\n      this.parser.encodePayload(packets, doWrite);\n    }\n  }\n  /**\n   * Writes data as response to poll request.\n   *\n   * @param {String} data\n   * @param {Object} options\n   * @api private\n   */\n\n\n  write(data, options) {\n    debug('writing \"%s\"', data);\n    this.doWrite(data, options, () => {\n      this.req.cleanup();\n    });\n  }\n  /**\n   * Performs the write.\n   *\n   * @api private\n   */\n\n\n  doWrite(data, options, callback) {\n    // explicit UTF-8 is required for pages not served under utf\n    const isString = typeof data === \"string\";\n    const contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n    const headers = {\n      \"Content-Type\": contentType\n    };\n\n    const respond = data => {\n      this.headers(this.req, headers);\n      Object.keys(headers).forEach(key => {\n        this.res.writeHeader(key, String(headers[key]));\n      });\n      this.res.end(data);\n      callback();\n    };\n\n    if (!this.httpCompression || !options.compress) {\n      respond(data);\n      return;\n    }\n\n    const len = isString ? Buffer.byteLength(data) : data.length;\n\n    if (len < this.httpCompression.threshold) {\n      respond(data);\n      return;\n    }\n\n    const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n    if (!encoding) {\n      respond(data);\n      return;\n    }\n\n    this.compress(data, encoding, (err, data) => {\n      if (err) {\n        this.res.writeStatus(\"500 Internal Server Error\");\n        this.res.end();\n        callback(err);\n        return;\n      }\n\n      headers[\"Content-Encoding\"] = encoding;\n      respond(data);\n    });\n  }\n  /**\n   * Compresses data.\n   *\n   * @api private\n   */\n\n\n  compress(data, encoding, callback) {\n    debug(\"compressing\");\n    const buffers = [];\n    let nread = 0;\n    compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n      buffers.push(chunk);\n      nread += chunk.length;\n    }).on(\"end\", function () {\n      callback(null, Buffer.concat(buffers, nread));\n    }).end(data);\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    let closeTimeoutTimer;\n\n    const onClose = () => {\n      clearTimeout(closeTimeoutTimer);\n      fn();\n      this.onClose();\n    };\n\n    if (this.writable) {\n      debug(\"transport writable - closing right away\");\n      this.send([{\n        type: \"close\"\n      }]);\n      onClose();\n    } else if (this.discarded) {\n      debug(\"transport discarded - closing right away\");\n      onClose();\n    } else {\n      debug(\"transport not writable - buffering orderly close\");\n      this.shouldClose = onClose;\n      closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n    }\n  }\n  /**\n   * Returns headers for a response.\n   *\n   * @param req - request\n   * @param {Object} extra headers\n   * @api private\n   */\n\n\n  headers(req, headers) {\n    headers = headers || {}; // prevent XSS warnings on IE\n    // https://github.com/LearnBoost/socket.io/pull/1333\n\n    const ua = req.headers[\"user-agent\"];\n\n    if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n      headers[\"X-XSS-Protection\"] = \"0\";\n    }\n\n    this.emit(\"headers\", headers, req);\n    return headers;\n  }\n\n}\n\nexports.Polling = Polling;","map":{"version":3,"names":["Object","defineProperty","exports","value","Polling","transport_1","require","zlib_1","accepts","debug_1","debug","default","compressionMethods","gzip","createGzip","deflate","createDeflate","Transport","constructor","req","closeTimeout","name","supportsFraming","onRequest","res","getMethod","onPollRequest","onDataRequest","writeStatus","end","onError","onClose","writable","cleanup","onAborted","emit","shouldClose","send","type","dataReq","expectedContentLength","Number","headers","maxHttpBufferSize","isBinary","protocol","dataRes","buffer","offset","key","writeHeader","String","onEnd","onData","toString","onDataRequestCleanup","arrayBuffer","isLast","totalLength","byteLength","close","Buffer","from","allocUnsafe","copy","data","callback","packet","onPacket","parser","decodePayload","forEach","packets","push","doWrite","compress","some","options","write","encodePayload","supportsBinary","isString","contentType","respond","keys","httpCompression","len","length","threshold","encoding","encodings","err","buffers","nread","on","chunk","concat","doClose","fn","closeTimeoutTimer","clearTimeout","discarded","setTimeout","ua","indexOf"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/engine.io/build/transports-uws/polling.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polling = void 0;\nconst transport_1 = require(\"../transport\");\nconst zlib_1 = require(\"zlib\");\nconst accepts = require(\"accepts\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n    gzip: zlib_1.createGzip,\n    deflate: zlib_1.createDeflate\n};\nclass Polling extends transport_1.Transport {\n    /**\n     * HTTP polling constructor.\n     *\n     * @api public.\n     */\n    constructor(req) {\n        super(req);\n        this.closeTimeout = 30 * 1000;\n    }\n    /**\n     * Transport name\n     *\n     * @api public\n     */\n    get name() {\n        return \"polling\";\n    }\n    get supportsFraming() {\n        return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param req\n     *\n     * @api private\n     */\n    onRequest(req) {\n        const res = req.res;\n        if (req.getMethod() === \"get\") {\n            this.onPollRequest(req, res);\n        }\n        else if (req.getMethod() === \"post\") {\n            this.onDataRequest(req, res);\n        }\n        else {\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n        }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n    onPollRequest(req, res) {\n        if (this.req) {\n            debug(\"request overlap\");\n            // assert: this.res, '.req and .res should be (un)set together'\n            this.onError(\"overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        debug(\"setting request\");\n        this.req = req;\n        this.res = res;\n        const onClose = () => {\n            this.writable = false;\n            this.onError(\"poll connection closed prematurely\");\n        };\n        const cleanup = () => {\n            this.req = this.res = null;\n        };\n        req.cleanup = cleanup;\n        res.onAborted(onClose);\n        this.writable = true;\n        this.emit(\"drain\");\n        // if we're still writable but had a pending close, trigger an empty send\n        if (this.writable && this.shouldClose) {\n            debug(\"triggering empty send to append close packet\");\n            this.send([{ type: \"noop\" }]);\n        }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n    onDataRequest(req, res) {\n        if (this.dataReq) {\n            // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n            this.onError(\"data request overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        const expectedContentLength = Number(req.headers[\"content-length\"]);\n        if (!expectedContentLength) {\n            this.onError(\"content-length header required\");\n            res.writeStatus(\"411 Length Required\").end();\n            return;\n        }\n        if (expectedContentLength > this.maxHttpBufferSize) {\n            this.onError(\"payload too large\");\n            res.writeStatus(\"413 Payload Too Large\").end();\n            return;\n        }\n        const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n        if (isBinary && this.protocol === 4) {\n            return this.onError(\"invalid content\");\n        }\n        this.dataReq = req;\n        this.dataRes = res;\n        let buffer;\n        let offset = 0;\n        const headers = {\n            // text/html is required instead of text/plain to avoid an\n            // unwanted download dialog on certain user-agents (GH-43)\n            \"Content-Type\": \"text/html\"\n        };\n        this.headers(req, headers);\n        for (let key in headers) {\n            res.writeHeader(key, String(headers[key]));\n        }\n        const onEnd = buffer => {\n            this.onData(buffer.toString());\n            this.onDataRequestCleanup();\n            res.end(\"ok\");\n        };\n        res.onAborted(() => {\n            this.onDataRequestCleanup();\n            this.onError(\"data request connection closed prematurely\");\n        });\n        res.onData((arrayBuffer, isLast) => {\n            const totalLength = offset + arrayBuffer.byteLength;\n            if (totalLength > expectedContentLength) {\n                this.onError(\"content-length mismatch\");\n                res.close(); // calls onAborted\n                return;\n            }\n            if (!buffer) {\n                if (isLast) {\n                    onEnd(Buffer.from(arrayBuffer));\n                    return;\n                }\n                buffer = Buffer.allocUnsafe(expectedContentLength);\n            }\n            Buffer.from(arrayBuffer).copy(buffer, offset);\n            if (isLast) {\n                if (totalLength != expectedContentLength) {\n                    this.onError(\"content-length mismatch\");\n                    res.writeStatus(\"400 Content-Length Mismatch\").end();\n                    this.onDataRequestCleanup();\n                    return;\n                }\n                onEnd(buffer);\n                return;\n            }\n            offset = totalLength;\n        });\n    }\n    /**\n     * Cleanup request.\n     *\n     * @api private\n     */\n    onDataRequestCleanup() {\n        this.dataReq = this.dataRes = null;\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n    onData(data) {\n        debug('received \"%s\"', data);\n        const callback = packet => {\n            if (\"close\" === packet.type) {\n                debug(\"got xhr close packet\");\n                this.onClose();\n                return false;\n            }\n            this.onPacket(packet);\n        };\n        if (this.protocol === 3) {\n            this.parser.decodePayload(data, callback);\n        }\n        else {\n            this.parser.decodePayload(data).forEach(callback);\n        }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n    onClose() {\n        if (this.writable) {\n            // close pending poll request\n            this.send([{ type: \"noop\" }]);\n        }\n        super.onClose();\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n    send(packets) {\n        this.writable = false;\n        if (this.shouldClose) {\n            debug(\"appending close packet to payload\");\n            packets.push({ type: \"close\" });\n            this.shouldClose();\n            this.shouldClose = null;\n        }\n        const doWrite = data => {\n            const compress = packets.some(packet => {\n                return packet.options && packet.options.compress;\n            });\n            this.write(data, { compress });\n        };\n        if (this.protocol === 3) {\n            this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n        }\n        else {\n            this.parser.encodePayload(packets, doWrite);\n        }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n    write(data, options) {\n        debug('writing \"%s\"', data);\n        this.doWrite(data, options, () => {\n            this.req.cleanup();\n        });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n    doWrite(data, options, callback) {\n        // explicit UTF-8 is required for pages not served under utf\n        const isString = typeof data === \"string\";\n        const contentType = isString\n            ? \"text/plain; charset=UTF-8\"\n            : \"application/octet-stream\";\n        const headers = {\n            \"Content-Type\": contentType\n        };\n        const respond = data => {\n            this.headers(this.req, headers);\n            Object.keys(headers).forEach(key => {\n                this.res.writeHeader(key, String(headers[key]));\n            });\n            this.res.end(data);\n            callback();\n        };\n        if (!this.httpCompression || !options.compress) {\n            respond(data);\n            return;\n        }\n        const len = isString ? Buffer.byteLength(data) : data.length;\n        if (len < this.httpCompression.threshold) {\n            respond(data);\n            return;\n        }\n        const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n        if (!encoding) {\n            respond(data);\n            return;\n        }\n        this.compress(data, encoding, (err, data) => {\n            if (err) {\n                this.res.writeStatus(\"500 Internal Server Error\");\n                this.res.end();\n                callback(err);\n                return;\n            }\n            headers[\"Content-Encoding\"] = encoding;\n            respond(data);\n        });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n    compress(data, encoding, callback) {\n        debug(\"compressing\");\n        const buffers = [];\n        let nread = 0;\n        compressionMethods[encoding](this.httpCompression)\n            .on(\"error\", callback)\n            .on(\"data\", function (chunk) {\n            buffers.push(chunk);\n            nread += chunk.length;\n        })\n            .on(\"end\", function () {\n            callback(null, Buffer.concat(buffers, nread));\n        })\n            .end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    doClose(fn) {\n        debug(\"closing\");\n        let closeTimeoutTimer;\n        const onClose = () => {\n            clearTimeout(closeTimeoutTimer);\n            fn();\n            this.onClose();\n        };\n        if (this.writable) {\n            debug(\"transport writable - closing right away\");\n            this.send([{ type: \"close\" }]);\n            onClose();\n        }\n        else if (this.discarded) {\n            debug(\"transport discarded - closing right away\");\n            onClose();\n        }\n        else {\n            debug(\"transport not writable - buffering orderly close\");\n            this.shouldClose = onClose;\n            closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n        }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param req - request\n     * @param {Object} extra headers\n     * @api private\n     */\n    headers(req, headers) {\n        headers = headers || {};\n        // prevent XSS warnings on IE\n        // https://github.com/LearnBoost/socket.io/pull/1333\n        const ua = req.headers[\"user-agent\"];\n        if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n            headers[\"X-XSS-Protection\"] = \"0\";\n        }\n        this.emit(\"headers\", headers, req);\n        return headers;\n    }\n}\nexports.Polling = Polling;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}