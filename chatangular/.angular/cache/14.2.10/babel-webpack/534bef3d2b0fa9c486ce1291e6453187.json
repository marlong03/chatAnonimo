{"ast":null,"code":"import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n  return source => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n  constructor(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  }\n\n}\nexport class MergeScanSubscriber extends OuterSubscriber {\n  constructor(destination, accumulator, acc, concurrent) {\n    super(destination);\n    this.accumulator = accumulator;\n    this.acc = acc;\n    this.concurrent = concurrent;\n    this.hasValue = false;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  _next(value) {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const destination = this.destination;\n      let ish;\n\n      try {\n        const {\n          accumulator\n        } = this;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n\n      this.active++;\n\n      this._innerSub(ish, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  _innerSub(ish, value, index) {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    subscribeToResult(this, ish, value, index, innerSubscriber);\n  }\n\n  _complete() {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    const {\n      destination\n    } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub) {\n    const buffer = this.buffer;\n    const destination = this.destination;\n    destination.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"names":["subscribeToResult","OuterSubscriber","InnerSubscriber","mergeScan","accumulator","seed","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeScanOperator","constructor","call","subscriber","subscribe","MergeScanSubscriber","destination","acc","hasValue","hasCompleted","buffer","active","index","_next","value","ish","e","error","_innerSub","push","innerSubscriber","undefined","add","_complete","length","next","complete","unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","remove","shift"],"sources":["C:/Users/SystemForLinux/Desktop/angular8-springboot-websocket-master/angular8-springboot-websocket-master/front-end/angular8-springboot-websocket/node_modules/rxjs/_esm2015/internal/operators/mergeScan.js"],"sourcesContent":["import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends OuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,2BAAlC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,IAAhC,EAAsCC,UAAU,GAAGC,MAAM,CAACC,iBAA1D,EAA6E;EAChF,OAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBP,WAAtB,EAAmCC,IAAnC,EAAyCC,UAAzC,CAAZ,CAAnB;AACH;AACD,OAAO,MAAMK,iBAAN,CAAwB;EAC3BC,WAAW,CAACR,WAAD,EAAcC,IAAd,EAAoBC,UAApB,EAAgC;IACvC,KAAKF,WAAL,GAAmBA,WAAnB;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,UAAL,GAAkBA,UAAlB;EACH;;EACDO,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;IACrB,OAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKV,WAAzC,EAAsD,KAAKC,IAA3D,EAAiE,KAAKC,UAAtE,CAAjB,CAAP;EACH;;AAR0B;AAU/B,OAAO,MAAMU,mBAAN,SAAkCf,eAAlC,CAAkD;EACrDW,WAAW,CAACK,WAAD,EAAcb,WAAd,EAA2Bc,GAA3B,EAAgCZ,UAAhC,EAA4C;IACnD,MAAMW,WAAN;IACA,KAAKb,WAAL,GAAmBA,WAAnB;IACA,KAAKc,GAAL,GAAWA,GAAX;IACA,KAAKZ,UAAL,GAAkBA,UAAlB;IACA,KAAKa,QAAL,GAAgB,KAAhB;IACA,KAAKC,YAAL,GAAoB,KAApB;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,KAAL,GAAa,CAAb;EACH;;EACDC,KAAK,CAACC,KAAD,EAAQ;IACT,IAAI,KAAKH,MAAL,GAAc,KAAKhB,UAAvB,EAAmC;MAC/B,MAAMiB,KAAK,GAAG,KAAKA,KAAL,EAAd;MACA,MAAMN,WAAW,GAAG,KAAKA,WAAzB;MACA,IAAIS,GAAJ;;MACA,IAAI;QACA,MAAM;UAAEtB;QAAF,IAAkB,IAAxB;QACAsB,GAAG,GAAGtB,WAAW,CAAC,KAAKc,GAAN,EAAWO,KAAX,EAAkBF,KAAlB,CAAjB;MACH,CAHD,CAIA,OAAOI,CAAP,EAAU;QACN,OAAOV,WAAW,CAACW,KAAZ,CAAkBD,CAAlB,CAAP;MACH;;MACD,KAAKL,MAAL;;MACA,KAAKO,SAAL,CAAeH,GAAf,EAAoBD,KAApB,EAA2BF,KAA3B;IACH,CAbD,MAcK;MACD,KAAKF,MAAL,CAAYS,IAAZ,CAAiBL,KAAjB;IACH;EACJ;;EACDI,SAAS,CAACH,GAAD,EAAMD,KAAN,EAAaF,KAAb,EAAoB;IACzB,MAAMQ,eAAe,GAAG,IAAI7B,eAAJ,CAAoB,IAApB,EAA0B8B,SAA1B,EAAqCA,SAArC,CAAxB;IACA,MAAMf,WAAW,GAAG,KAAKA,WAAzB;IACAA,WAAW,CAACgB,GAAZ,CAAgBF,eAAhB;IACA/B,iBAAiB,CAAC,IAAD,EAAO0B,GAAP,EAAYD,KAAZ,EAAmBF,KAAnB,EAA0BQ,eAA1B,CAAjB;EACH;;EACDG,SAAS,GAAG;IACR,KAAKd,YAAL,GAAoB,IAApB;;IACA,IAAI,KAAKE,MAAL,KAAgB,CAAhB,IAAqB,KAAKD,MAAL,CAAYc,MAAZ,KAAuB,CAAhD,EAAmD;MAC/C,IAAI,KAAKhB,QAAL,KAAkB,KAAtB,EAA6B;QACzB,KAAKF,WAAL,CAAiBmB,IAAjB,CAAsB,KAAKlB,GAA3B;MACH;;MACD,KAAKD,WAAL,CAAiBoB,QAAjB;IACH;;IACD,KAAKC,WAAL;EACH;;EACDC,UAAU,CAACC,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2D;IACjE,MAAM;MAAE3B;IAAF,IAAkB,IAAxB;IACA,KAAKC,GAAL,GAAWuB,UAAX;IACA,KAAKtB,QAAL,GAAgB,IAAhB;IACAF,WAAW,CAACmB,IAAZ,CAAiBK,UAAjB;EACH;;EACDI,cAAc,CAACD,QAAD,EAAW;IACrB,MAAMvB,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMJ,WAAW,GAAG,KAAKA,WAAzB;IACAA,WAAW,CAAC6B,MAAZ,CAAmBF,QAAnB;IACA,KAAKtB,MAAL;;IACA,IAAID,MAAM,CAACc,MAAP,GAAgB,CAApB,EAAuB;MACnB,KAAKX,KAAL,CAAWH,MAAM,CAAC0B,KAAP,EAAX;IACH,CAFD,MAGK,IAAI,KAAKzB,MAAL,KAAgB,CAAhB,IAAqB,KAAKF,YAA9B,EAA4C;MAC7C,IAAI,KAAKD,QAAL,KAAkB,KAAtB,EAA6B;QACzB,KAAKF,WAAL,CAAiBmB,IAAjB,CAAsB,KAAKlB,GAA3B;MACH;;MACD,KAAKD,WAAL,CAAiBoB,QAAjB;IACH;EACJ;;AAnEoD"},"metadata":{},"sourceType":"module"}