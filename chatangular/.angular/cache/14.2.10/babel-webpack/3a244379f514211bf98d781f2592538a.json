{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst typed_events_1 = require(\"./typed-events\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\n\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\n\nclass Namespace extends typed_events_1.StrictEventEmitter {\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  constructor(server, name) {\n    super();\n    this.sockets = new Map();\n    /** @private */\n\n    this._fns = [];\n    /** @private */\n\n    this._ids = 0;\n    this.server = server;\n    this.name = name;\n\n    this._initAdapter();\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n\n\n  _initAdapter() {\n    // @ts-ignore\n    this.adapter = new (this.server.adapter())(this);\n  }\n  /**\n   * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.use((socket, next) => {\n   *   // ...\n   *   next();\n   * });\n   *\n   * @param fn - the middleware function\n   */\n\n\n  use(fn) {\n    this._fns.push(fn);\n\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming client.\n   *\n   * @param socket - the socket that will get added\n   * @param fn - last fn call in the middleware\n   * @private\n   */\n\n\n  run(socket, fn) {\n    const fns = this._fns.slice(0);\n\n    if (!fns.length) return fn(null);\n\n    function run(i) {\n      fns[i](socket, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err); // if no middleware left, summon callback\n\n        if (!fns[i + 1]) return fn(null); // go on to next\n\n        run(i + 1);\n      });\n    }\n\n    run(0);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  to(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // disconnect all clients in the \"room-101\" room\n   * myNamespace.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  in(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  except(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n  }\n  /**\n   * Adds a new client.\n   *\n   * @return {Socket}\n   * @private\n   */\n\n\n  _add(client, query, fn) {\n    debug(\"adding socket to nsp %s\", this.name);\n    const socket = new socket_1.Socket(this, client, query);\n    this.run(socket, err => {\n      process.nextTick(() => {\n        if (\"open\" !== client.conn.readyState) {\n          debug(\"next called after client was closed - ignoring socket\");\n\n          socket._cleanup();\n\n          return;\n        }\n\n        if (err) {\n          debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n\n          socket._cleanup();\n\n          if (client.conn.protocol === 3) {\n            return socket._error(err.data || err.message);\n          } else {\n            return socket._error({\n              message: err.message,\n              data: err.data\n            });\n          }\n        } // track socket\n\n\n        this.sockets.set(socket.id, socket); // it's paramount that the internal `onconnect` logic\n        // fires before user-set events to prevent state order\n        // violations (such as a disconnection before the connection\n        // logic is complete)\n\n        socket._onconnect();\n\n        if (fn) fn(); // fire user-set events\n\n        this.emitReserved(\"connect\", socket);\n        this.emitReserved(\"connection\", socket);\n      });\n    });\n    return socket;\n  }\n  /**\n   * Removes a client. Called by each `Socket`.\n   *\n   * @private\n   */\n\n\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      this.sockets.delete(socket.id);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Emits to all connected clients.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the clients\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n\n\n  emit(ev, ...args) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n  }\n  /**\n   * Sends a `message` event to all clients.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.send(\"hello\");\n   *\n   * // this is equivalent to\n   * myNamespace.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n\n\n  send(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n   *\n   * @return self\n   */\n\n\n  write(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a message to the other Socket.IO servers of the cluster.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.serverSideEmit(\"hello\", \"world\");\n   *\n   * myNamespace.on(\"hello\", (arg1) => {\n   *   console.log(arg1); // prints \"world\"\n   * });\n   *\n   * // acknowledgements (without binary content) are supported too:\n   * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n   *  if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * myNamespace.on(\"ping\", (cb) => {\n   *   cb(\"pong\");\n   * });\n   *\n   * @param ev - the event name\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   */\n\n\n  serverSideEmit(ev, ...args) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    }\n\n    args.unshift(ev);\n    this.adapter.serverSideEmit(args);\n    return true;\n  }\n  /**\n   * Called when a packet is received from another Socket.IO server\n   *\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   *\n   * @private\n   */\n\n\n  _onServerSideEmit(args) {\n    super.emitUntyped.apply(this, args);\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n   * {@link Namespace#fetchSockets} instead.\n   */\n\n\n  allSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n\n\n  compress(compress) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return self\n   */\n\n\n  get volatile() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * myNamespace.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get local() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n  }\n  /**\n   * Returns the matching socket instances.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // return all Socket instances\n   * const sockets = await myNamespace.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n\n\n  fetchSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances join the \"room1\" room\n   * myNamespace.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsJoin(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances leave the \"room1\" room\n   * myNamespace.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsLeave(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * myNamespace.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * myNamespace.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(close = false) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n  }\n\n}\n\nexports.Namespace = Namespace;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Namespace","RESERVED_EVENTS","socket_1","require","typed_events_1","debug_1","broadcast_operator_1","debug","default","Set","StrictEventEmitter","constructor","server","name","sockets","Map","_fns","_ids","_initAdapter","adapter","use","fn","push","run","socket","fns","slice","length","i","err","to","room","BroadcastOperator","in","except","_add","client","query","Socket","process","nextTick","conn","readyState","_cleanup","protocol","_error","data","message","set","id","_onconnect","emitReserved","_remove","has","delete","emit","ev","args","send","write","serverSideEmit","Error","String","unshift","_onServerSideEmit","emitUntyped","apply","allSockets","compress","volatile","local","timeout","fetchSockets","socketsJoin","socketsLeave","disconnectSockets","close"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/socket.io/dist/namespace.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\nclass Namespace extends typed_events_1.StrictEventEmitter {\n    /**\n     * Namespace constructor.\n     *\n     * @param server instance\n     * @param name\n     */\n    constructor(server, name) {\n        super();\n        this.sockets = new Map();\n        /** @private */\n        this._fns = [];\n        /** @private */\n        this._ids = 0;\n        this.server = server;\n        this.name = name;\n        this._initAdapter();\n    }\n    /**\n     * Initializes the `Adapter` for this nsp.\n     * Run upon changing adapter by `Server#adapter`\n     * in addition to the constructor.\n     *\n     * @private\n     */\n    _initAdapter() {\n        // @ts-ignore\n        this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.use((socket, next) => {\n     *   // ...\n     *   next();\n     * });\n     *\n     * @param fn - the middleware function\n     */\n    use(fn) {\n        this._fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n    run(socket, fn) {\n        const fns = this._fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](socket, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // disconnect all clients in the \"room-101\" room\n     * myNamespace.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n    _add(client, query, fn) {\n        debug(\"adding socket to nsp %s\", this.name);\n        const socket = new socket_1.Socket(this, client, query);\n        this.run(socket, (err) => {\n            process.nextTick(() => {\n                if (\"open\" !== client.conn.readyState) {\n                    debug(\"next called after client was closed - ignoring socket\");\n                    socket._cleanup();\n                    return;\n                }\n                if (err) {\n                    debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n                    socket._cleanup();\n                    if (client.conn.protocol === 3) {\n                        return socket._error(err.data || err.message);\n                    }\n                    else {\n                        return socket._error({\n                            message: err.message,\n                            data: err.data,\n                        });\n                    }\n                }\n                // track socket\n                this.sockets.set(socket.id, socket);\n                // it's paramount that the internal `onconnect` logic\n                // fires before user-set events to prevent state order\n                // violations (such as a disconnection before the connection\n                // logic is complete)\n                socket._onconnect();\n                if (fn)\n                    fn();\n                // fire user-set events\n                this.emitReserved(\"connect\", socket);\n                this.emitReserved(\"connection\", socket);\n            });\n        });\n        return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            this.sockets.delete(socket.id);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Emits to all connected clients.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the clients\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.send(\"hello\");\n     *\n     * // this is equivalent to\n     * myNamespace.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a message to the other Socket.IO servers of the cluster.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.serverSideEmit(\"hello\", \"world\");\n     *\n     * myNamespace.on(\"hello\", (arg1) => {\n     *   console.log(arg1); // prints \"world\"\n     * });\n     *\n     * // acknowledgements (without binary content) are supported too:\n     * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n     *  if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * myNamespace.on(\"ping\", (cb) => {\n     *   cb(\"pong\");\n     * });\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     */\n    serverSideEmit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        this.adapter.serverSideEmit(args);\n        return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n    _onServerSideEmit(args) {\n        super.emitUntyped.apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n     * {@link Namespace#fetchSockets} instead.\n     */\n    allSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return self\n     */\n    get volatile() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * myNamespace.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n    }\n    /**\n     * Returns the matching socket instances.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // return all Socket instances\n     * const sockets = await myNamespace.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances join the \"room1\" room\n     * myNamespace.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances leave the \"room1\" room\n     * myNamespace.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * myNamespace.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * myNamespace.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n}\nexports.Namespace = Namespace;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}