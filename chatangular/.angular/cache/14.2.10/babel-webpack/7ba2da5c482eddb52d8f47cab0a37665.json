{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\n\nconst socket_1 = require(\"./socket\");\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nclass BroadcastOperator {\n  constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n    this.adapter = adapter;\n    this.rooms = rooms;\n    this.exceptRooms = exceptRooms;\n    this.flags = flags;\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  to(room) {\n    const rooms = new Set(this.rooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => rooms.add(r));\n    } else {\n      rooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * // disconnect all clients in the \"room-101\" room\n   * io.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  in(room) {\n    return this.to(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * io.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  except(room) {\n    const exceptRooms = new Set(this.exceptRooms);\n\n    if (Array.isArray(room)) {\n      room.forEach(r => exceptRooms.add(r));\n    } else {\n      exceptRooms.add(room);\n    }\n\n    return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * io.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return a new BroadcastOperator instance\n   */\n\n\n  compress(compress) {\n    const flags = Object.assign({}, this.flags, {\n      compress\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return a new BroadcastOperator instance\n   */\n\n\n  get volatile() {\n    const flags = Object.assign({}, this.flags, {\n      volatile: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * io.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n\n\n  get local() {\n    const flags = Object.assign({}, this.flags, {\n      local: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation\n   *\n   * @example\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n\n\n  timeout(timeout) {\n    const flags = Object.assign({}, this.flags, {\n      timeout\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Emits to all clients.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients\n   * io.emit(\"foo\", \"bar\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an acknowledgement expected from all connected clients\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n\n\n  emit(ev, ...args) {\n    if (socket_1.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    } // set up packet object\n\n\n    const data = [ev, ...args];\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: data\n    };\n    const withAck = typeof data[data.length - 1] === \"function\";\n\n    if (!withAck) {\n      this.adapter.broadcast(packet, {\n        rooms: this.rooms,\n        except: this.exceptRooms,\n        flags: this.flags\n      });\n      return true;\n    }\n\n    const ack = data.pop();\n    let timedOut = false;\n    let responses = [];\n    const timer = setTimeout(() => {\n      timedOut = true;\n      ack.apply(this, [new Error(\"operation has timed out\"), responses]);\n    }, this.flags.timeout);\n    let expectedServerCount = -1;\n    let actualServerCount = 0;\n    let expectedClientCount = 0;\n\n    const checkCompleteness = () => {\n      if (!timedOut && expectedServerCount === actualServerCount && responses.length === expectedClientCount) {\n        clearTimeout(timer);\n        ack.apply(this, [null, responses]);\n      }\n    };\n\n    this.adapter.broadcastWithAck(packet, {\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, clientCount => {\n      // each Socket.IO server in the cluster sends the number of clients that were notified\n      expectedClientCount += clientCount;\n      actualServerCount++;\n      checkCompleteness();\n    }, clientResponse => {\n      // each client sends an acknowledgement\n      responses.push(clientResponse);\n      checkCompleteness();\n    });\n    this.adapter.serverCount().then(serverCount => {\n      expectedServerCount = serverCount;\n      checkCompleteness();\n    });\n    return true;\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n   * {@link fetchSockets} instead.\n   */\n\n\n  allSockets() {\n    if (!this.adapter) {\n      throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n    }\n\n    return this.adapter.sockets(this.rooms);\n  }\n  /**\n   * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // return all Socket instances\n   * const sockets = await io.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await io.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n\n\n  fetchSockets() {\n    return this.adapter.fetchSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }).then(sockets => {\n      return sockets.map(socket => {\n        if (socket instanceof socket_1.Socket) {\n          // FIXME the TypeScript compiler complains about missing private properties\n          return socket;\n        } else {\n          return new RemoteSocket(this.adapter, socket);\n        }\n      });\n    });\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   *\n   * // make all socket instances join the \"room1\" room\n   * io.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsJoin(room) {\n    this.adapter.addSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances leave the \"room1\" room\n   * io.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n\n\n  socketsLeave(room) {\n    this.adapter.delSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * io.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * io.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(close = false) {\n    this.adapter.disconnectSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, close);\n  }\n\n}\n\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\n\nclass RemoteSocket {\n  constructor(adapter, details) {\n    this.id = details.id;\n    this.handshake = details.handshake;\n    this.rooms = new Set(details.rooms);\n    this.data = details.data;\n    this.operator = new BroadcastOperator(adapter, new Set([this.id]));\n  }\n\n  emit(ev, ...args) {\n    return this.operator.emit(ev, ...args);\n  }\n  /**\n   * Joins a room.\n   *\n   * @param {String|Array} room - room or array of rooms\n   */\n\n\n  join(room) {\n    return this.operator.socketsJoin(room);\n  }\n  /**\n   * Leaves a room.\n   *\n   * @param {String} room\n   */\n\n\n  leave(room) {\n    return this.operator.socketsLeave(room);\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return {Socket} self\n   */\n\n\n  disconnect(close = false) {\n    this.operator.disconnectSockets(close);\n    return this;\n  }\n\n}\n\nexports.RemoteSocket = RemoteSocket;","map":{"version":3,"names":["Object","defineProperty","exports","value","RemoteSocket","BroadcastOperator","socket_1","require","socket_io_parser_1","constructor","adapter","rooms","Set","exceptRooms","flags","to","room","Array","isArray","forEach","r","add","in","except","compress","assign","volatile","local","timeout","emit","ev","args","RESERVED_EVENTS","has","Error","String","data","packet","type","PacketType","EVENT","withAck","length","broadcast","ack","pop","timedOut","responses","timer","setTimeout","apply","expectedServerCount","actualServerCount","expectedClientCount","checkCompleteness","clearTimeout","broadcastWithAck","clientCount","clientResponse","push","serverCount","then","allSockets","sockets","fetchSockets","map","socket","Socket","socketsJoin","addSockets","socketsLeave","delSockets","disconnectSockets","close","details","id","handshake","operator","join","leave","disconnect"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/socket.io/dist/broadcast-operator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\nconst socket_1 = require(\"./socket\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nclass BroadcastOperator {\n    constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n        this.adapter = adapter;\n        this.rooms = rooms;\n        this.exceptRooms = exceptRooms;\n        this.flags = flags;\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        const rooms = new Set(this.rooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => rooms.add(r));\n        }\n        else {\n            rooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * // disconnect all clients in the \"room-101\" room\n     * io.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return this.to(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * io.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        const exceptRooms = new Set(this.exceptRooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => exceptRooms.add(r));\n        }\n        else {\n            exceptRooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return a new BroadcastOperator instance\n     */\n    compress(compress) {\n        const flags = Object.assign({}, this.flags, { compress });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return a new BroadcastOperator instance\n     */\n    get volatile() {\n        const flags = Object.assign({}, this.flags, { volatile: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * io.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        const flags = Object.assign({}, this.flags, { local: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * @example\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        const flags = Object.assign({}, this.flags, { timeout });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients\n     * io.emit(\"foo\", \"bar\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an acknowledgement expected from all connected clients\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        if (socket_1.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        // set up packet object\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        const withAck = typeof data[data.length - 1] === \"function\";\n        if (!withAck) {\n            this.adapter.broadcast(packet, {\n                rooms: this.rooms,\n                except: this.exceptRooms,\n                flags: this.flags,\n            });\n            return true;\n        }\n        const ack = data.pop();\n        let timedOut = false;\n        let responses = [];\n        const timer = setTimeout(() => {\n            timedOut = true;\n            ack.apply(this, [new Error(\"operation has timed out\"), responses]);\n        }, this.flags.timeout);\n        let expectedServerCount = -1;\n        let actualServerCount = 0;\n        let expectedClientCount = 0;\n        const checkCompleteness = () => {\n            if (!timedOut &&\n                expectedServerCount === actualServerCount &&\n                responses.length === expectedClientCount) {\n                clearTimeout(timer);\n                ack.apply(this, [null, responses]);\n            }\n        };\n        this.adapter.broadcastWithAck(packet, {\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, (clientCount) => {\n            // each Socket.IO server in the cluster sends the number of clients that were notified\n            expectedClientCount += clientCount;\n            actualServerCount++;\n            checkCompleteness();\n        }, (clientResponse) => {\n            // each client sends an acknowledgement\n            responses.push(clientResponse);\n            checkCompleteness();\n        });\n        this.adapter.serverCount().then((serverCount) => {\n            expectedServerCount = serverCount;\n            checkCompleteness();\n        });\n        return true;\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n     * {@link fetchSockets} instead.\n     */\n    allSockets() {\n        if (!this.adapter) {\n            throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n        }\n        return this.adapter.sockets(this.rooms);\n    }\n    /**\n     * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // return all Socket instances\n     * const sockets = await io.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await io.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return this.adapter\n            .fetchSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        })\n            .then((sockets) => {\n            return sockets.map((socket) => {\n                if (socket instanceof socket_1.Socket) {\n                    // FIXME the TypeScript compiler complains about missing private properties\n                    return socket;\n                }\n                else {\n                    return new RemoteSocket(this.adapter, socket);\n                }\n            });\n        });\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     *\n     * // make all socket instances join the \"room1\" room\n     * io.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        this.adapter.addSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances leave the \"room1\" room\n     * io.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        this.adapter.delSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * io.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * io.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        this.adapter.disconnectSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, close);\n    }\n}\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\nclass RemoteSocket {\n    constructor(adapter, details) {\n        this.id = details.id;\n        this.handshake = details.handshake;\n        this.rooms = new Set(details.rooms);\n        this.data = details.data;\n        this.operator = new BroadcastOperator(adapter, new Set([this.id]));\n    }\n    emit(ev, ...args) {\n        return this.operator.emit(ev, ...args);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} room - room or array of rooms\n     */\n    join(room) {\n        return this.operator.socketsJoin(room);\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     */\n    leave(room) {\n        return this.operator.socketsLeave(room);\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     */\n    disconnect(close = false) {\n        this.operator.disconnectSockets(close);\n        return this;\n    }\n}\nexports.RemoteSocket = RemoteSocket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}