{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nconst events_1 = require(\"events\");\n\nclass Adapter extends events_1.EventEmitter {\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  constructor(nsp) {\n    super();\n    this.nsp = nsp;\n    this.rooms = new Map();\n    this.sids = new Map();\n    this.encoder = nsp.server.encoder;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  init() {}\n  /**\n   * To be overridden\n   */\n\n\n  close() {}\n  /**\n   * Returns the number of Socket.IO servers in the cluster\n   *\n   * @public\n   */\n\n\n  serverCount() {\n    return Promise.resolve(1);\n  }\n  /**\n   * Adds a socket to a list of room.\n   *\n   * @param {SocketId}  id      the socket id\n   * @param {Set<Room>} rooms   a set of rooms\n   * @public\n   */\n\n\n  addAll(id, rooms) {\n    if (!this.sids.has(id)) {\n      this.sids.set(id, new Set());\n    }\n\n    for (const room of rooms) {\n      this.sids.get(id).add(room);\n\n      if (!this.rooms.has(room)) {\n        this.rooms.set(room, new Set());\n        this.emit(\"create-room\", room);\n      }\n\n      if (!this.rooms.get(room).has(id)) {\n        this.rooms.get(room).add(id);\n        this.emit(\"join-room\", room, id);\n      }\n    }\n  }\n  /**\n   * Removes a socket from a room.\n   *\n   * @param {SocketId} id     the socket id\n   * @param {Room}     room   the room name\n   */\n\n\n  del(id, room) {\n    if (this.sids.has(id)) {\n      this.sids.get(id).delete(room);\n    }\n\n    this._del(room, id);\n  }\n\n  _del(room, id) {\n    const _room = this.rooms.get(room);\n\n    if (_room != null) {\n      const deleted = _room.delete(id);\n\n      if (deleted) {\n        this.emit(\"leave-room\", room, id);\n      }\n\n      if (_room.size === 0 && this.rooms.delete(room)) {\n        this.emit(\"delete-room\", room);\n      }\n    }\n  }\n  /**\n   * Removes a socket from all rooms it's joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  delAll(id) {\n    if (!this.sids.has(id)) {\n      return;\n    }\n\n    for (const room of this.sids.get(id)) {\n      this._del(room, id);\n    }\n\n    this.sids.delete(id);\n  }\n  /**\n   * Broadcasts a packet.\n   *\n   * Options:\n   *  - `flags` {Object} flags for this packet\n   *  - `except` {Array} sids that should be excluded\n   *  - `rooms` {Array} list of rooms to broadcast to\n   *\n   * @param {Object} packet   the packet object\n   * @param {Object} opts     the options\n   * @public\n   */\n\n\n  broadcast(packet, opts) {\n    const flags = opts.flags || {};\n    const packetOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    packet.nsp = this.nsp.name;\n    const encodedPackets = this.encoder.encode(packet);\n    this.apply(opts, socket => {\n      if (typeof socket.notifyOutgoingListeners === \"function\") {\n        socket.notifyOutgoingListeners(packet);\n      }\n\n      socket.client.writeToEngine(encodedPackets, packetOpts);\n    });\n  }\n  /**\n   * Broadcasts a packet and expects multiple acknowledgements.\n   *\n   * Options:\n   *  - `flags` {Object} flags for this packet\n   *  - `except` {Array} sids that should be excluded\n   *  - `rooms` {Array} list of rooms to broadcast to\n   *\n   * @param {Object} packet   the packet object\n   * @param {Object} opts     the options\n   * @param clientCountCallback - the number of clients that received the packet\n   * @param ack                 - the callback that will be called for each client response\n   *\n   * @public\n   */\n\n\n  broadcastWithAck(packet, opts, clientCountCallback, ack) {\n    const flags = opts.flags || {};\n    const packetOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    packet.nsp = this.nsp.name; // we can use the same id for each packet, since the _ids counter is common (no duplicate)\n\n    packet.id = this.nsp._ids++;\n    const encodedPackets = this.encoder.encode(packet);\n    let clientCount = 0;\n    this.apply(opts, socket => {\n      // track the total number of acknowledgements that are expected\n      clientCount++; // call the ack callback for each client response\n\n      socket.acks.set(packet.id, ack);\n\n      if (typeof socket.notifyOutgoingListeners === \"function\") {\n        socket.notifyOutgoingListeners(packet);\n      }\n\n      socket.client.writeToEngine(encodedPackets, packetOpts);\n    });\n    clientCountCallback(clientCount);\n  }\n  /**\n   * Gets a list of sockets by sid.\n   *\n   * @param {Set<Room>} rooms   the explicit set of rooms to check.\n   */\n\n\n  sockets(rooms) {\n    const sids = new Set();\n    this.apply({\n      rooms\n    }, socket => {\n      sids.add(socket.id);\n    });\n    return Promise.resolve(sids);\n  }\n  /**\n   * Gets the list of rooms a given socket has joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  socketRooms(id) {\n    return this.sids.get(id);\n  }\n  /**\n   * Returns the matching socket instances\n   *\n   * @param opts - the filters to apply\n   */\n\n\n  fetchSockets(opts) {\n    const sockets = [];\n    this.apply(opts, socket => {\n      sockets.push(socket);\n    });\n    return Promise.resolve(sockets);\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms\n   *\n   * @param opts - the filters to apply\n   * @param rooms - the rooms to join\n   */\n\n\n  addSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      socket.join(rooms);\n    });\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms\n   *\n   * @param opts - the filters to apply\n   * @param rooms - the rooms to leave\n   */\n\n\n  delSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      rooms.forEach(room => socket.leave(room));\n    });\n  }\n  /**\n   * Makes the matching socket instances disconnect\n   *\n   * @param opts - the filters to apply\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(opts, close) {\n    this.apply(opts, socket => {\n      socket.disconnect(close);\n    });\n  }\n\n  apply(opts, callback) {\n    const rooms = opts.rooms;\n    const except = this.computeExceptSids(opts.except);\n\n    if (rooms.size) {\n      const ids = new Set();\n\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (ids.has(id) || except.has(id)) continue;\n          const socket = this.nsp.sockets.get(id);\n\n          if (socket) {\n            callback(socket);\n            ids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (except.has(id)) continue;\n        const socket = this.nsp.sockets.get(id);\n        if (socket) callback(socket);\n      }\n    }\n  }\n\n  computeExceptSids(exceptRooms) {\n    const exceptSids = new Set();\n\n    if (exceptRooms && exceptRooms.size > 0) {\n      for (const room of exceptRooms) {\n        if (this.rooms.has(room)) {\n          this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n        }\n      }\n    }\n\n    return exceptSids;\n  }\n  /**\n   * Send a packet to the other Socket.IO servers in the cluster\n   * @param packet - an array of arguments, which may include an acknowledgement callback at the end\n   */\n\n\n  serverSideEmit(packet) {\n    console.warn(\"this adapter does not support the serverSideEmit() functionality\");\n  }\n\n}\n\nexports.Adapter = Adapter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Adapter","events_1","require","EventEmitter","constructor","nsp","rooms","Map","sids","encoder","server","init","close","serverCount","Promise","resolve","addAll","id","has","set","Set","room","get","add","emit","del","delete","_del","_room","deleted","size","delAll","broadcast","packet","opts","flags","packetOpts","preEncoded","volatile","compress","name","encodedPackets","encode","apply","socket","notifyOutgoingListeners","client","writeToEngine","broadcastWithAck","clientCountCallback","ack","_ids","clientCount","acks","sockets","socketRooms","fetchSockets","push","addSockets","join","delSockets","forEach","leave","disconnectSockets","disconnect","callback","except","computeExceptSids","ids","exceptRooms","exceptSids","sid","serverSideEmit","console","warn"],"sources":["C:/Users/SystemForLinux/Desktop/f2/code/chat/chatangular/node_modules/socket.io-adapter/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Adapter = void 0;\nconst events_1 = require(\"events\");\nclass Adapter extends events_1.EventEmitter {\n    /**\n     * In-memory adapter constructor.\n     *\n     * @param {Namespace} nsp\n     */\n    constructor(nsp) {\n        super();\n        this.nsp = nsp;\n        this.rooms = new Map();\n        this.sids = new Map();\n        this.encoder = nsp.server.encoder;\n    }\n    /**\n     * To be overridden\n     */\n    init() { }\n    /**\n     * To be overridden\n     */\n    close() { }\n    /**\n     * Returns the number of Socket.IO servers in the cluster\n     *\n     * @public\n     */\n    serverCount() {\n        return Promise.resolve(1);\n    }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n    addAll(id, rooms) {\n        if (!this.sids.has(id)) {\n            this.sids.set(id, new Set());\n        }\n        for (const room of rooms) {\n            this.sids.get(id).add(room);\n            if (!this.rooms.has(room)) {\n                this.rooms.set(room, new Set());\n                this.emit(\"create-room\", room);\n            }\n            if (!this.rooms.get(room).has(id)) {\n                this.rooms.get(room).add(id);\n                this.emit(\"join-room\", room, id);\n            }\n        }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n    del(id, room) {\n        if (this.sids.has(id)) {\n            this.sids.get(id).delete(room);\n        }\n        this._del(room, id);\n    }\n    _del(room, id) {\n        const _room = this.rooms.get(room);\n        if (_room != null) {\n            const deleted = _room.delete(id);\n            if (deleted) {\n                this.emit(\"leave-room\", room, id);\n            }\n            if (_room.size === 0 && this.rooms.delete(room)) {\n                this.emit(\"delete-room\", room);\n            }\n        }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    delAll(id) {\n        if (!this.sids.has(id)) {\n            return;\n        }\n        for (const room of this.sids.get(id)) {\n            this._del(room, id);\n        }\n        this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n    broadcast(packet, opts) {\n        const flags = opts.flags || {};\n        const packetOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        packet.nsp = this.nsp.name;\n        const encodedPackets = this.encoder.encode(packet);\n        this.apply(opts, socket => {\n            if (typeof socket.notifyOutgoingListeners === \"function\") {\n                socket.notifyOutgoingListeners(packet);\n            }\n            socket.client.writeToEngine(encodedPackets, packetOpts);\n        });\n    }\n    /**\n     * Broadcasts a packet and expects multiple acknowledgements.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @param clientCountCallback - the number of clients that received the packet\n     * @param ack                 - the callback that will be called for each client response\n     *\n     * @public\n     */\n    broadcastWithAck(packet, opts, clientCountCallback, ack) {\n        const flags = opts.flags || {};\n        const packetOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        packet.nsp = this.nsp.name;\n        // we can use the same id for each packet, since the _ids counter is common (no duplicate)\n        packet.id = this.nsp._ids++;\n        const encodedPackets = this.encoder.encode(packet);\n        let clientCount = 0;\n        this.apply(opts, socket => {\n            // track the total number of acknowledgements that are expected\n            clientCount++;\n            // call the ack callback for each client response\n            socket.acks.set(packet.id, ack);\n            if (typeof socket.notifyOutgoingListeners === \"function\") {\n                socket.notifyOutgoingListeners(packet);\n            }\n            socket.client.writeToEngine(encodedPackets, packetOpts);\n        });\n        clientCountCallback(clientCount);\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n    sockets(rooms) {\n        const sids = new Set();\n        this.apply({ rooms }, socket => {\n            sids.add(socket.id);\n        });\n        return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    socketRooms(id) {\n        return this.sids.get(id);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @param opts - the filters to apply\n     */\n    fetchSockets(opts) {\n        const sockets = [];\n        this.apply(opts, socket => {\n            sockets.push(socket);\n        });\n        return Promise.resolve(sockets);\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to join\n     */\n    addSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            socket.join(rooms);\n        });\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to leave\n     */\n    delSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            rooms.forEach(room => socket.leave(room));\n        });\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param opts - the filters to apply\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(opts, close) {\n        this.apply(opts, socket => {\n            socket.disconnect(close);\n        });\n    }\n    apply(opts, callback) {\n        const rooms = opts.rooms;\n        const except = this.computeExceptSids(opts.except);\n        if (rooms.size) {\n            const ids = new Set();\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (ids.has(id) || except.has(id))\n                        continue;\n                    const socket = this.nsp.sockets.get(id);\n                    if (socket) {\n                        callback(socket);\n                        ids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (except.has(id))\n                    continue;\n                const socket = this.nsp.sockets.get(id);\n                if (socket)\n                    callback(socket);\n            }\n        }\n    }\n    computeExceptSids(exceptRooms) {\n        const exceptSids = new Set();\n        if (exceptRooms && exceptRooms.size > 0) {\n            for (const room of exceptRooms) {\n                if (this.rooms.has(room)) {\n                    this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n                }\n            }\n        }\n        return exceptSids;\n    }\n    /**\n     * Send a packet to the other Socket.IO servers in the cluster\n     * @param packet - an array of arguments, which may include an acknowledgement callback at the end\n     */\n    serverSideEmit(packet) {\n        console.warn(\"this adapter does not support the serverSideEmit() functionality\");\n    }\n}\nexports.Adapter = Adapter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}