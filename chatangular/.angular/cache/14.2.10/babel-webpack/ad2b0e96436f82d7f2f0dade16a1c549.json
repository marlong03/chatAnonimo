{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n\n    return new Observable(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    } else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}","map":{"version":3,"names":["Observable","isPromise","isArrayLike","isInteropObservable","isIterable","fromArray","fromPromise","fromIterable","fromObservable","subscribeTo","from","input","scheduler","TypeError"],"sources":["C:/Users/SystemForLinux/Desktop/angular8-springboot-websocket-master/angular8-springboot-websocket-master/front-end/angular8-springboot-websocket/node_modules/rxjs/_esm2015/internal/observable/from.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,SAArB,EAAgC;EACnC,IAAI,CAACA,SAAL,EAAgB;IACZ,IAAID,KAAK,YAAYX,UAArB,EAAiC;MAC7B,OAAOW,KAAP;IACH;;IACD,OAAO,IAAIX,UAAJ,CAAeS,WAAW,CAACE,KAAD,CAA1B,CAAP;EACH;;EACD,IAAIA,KAAK,IAAI,IAAb,EAAmB;IACf,IAAIR,mBAAmB,CAACQ,KAAD,CAAvB,EAAgC;MAC5B,OAAOH,cAAc,CAACG,KAAD,EAAQC,SAAR,CAArB;IACH,CAFD,MAGK,IAAIX,SAAS,CAACU,KAAD,CAAb,EAAsB;MACvB,OAAOL,WAAW,CAACK,KAAD,EAAQC,SAAR,CAAlB;IACH,CAFI,MAGA,IAAIV,WAAW,CAACS,KAAD,CAAf,EAAwB;MACzB,OAAON,SAAS,CAACM,KAAD,EAAQC,SAAR,CAAhB;IACH,CAFI,MAGA,IAAIR,UAAU,CAACO,KAAD,CAAV,IAAqB,OAAOA,KAAP,KAAiB,QAA1C,EAAoD;MACrD,OAAOJ,YAAY,CAACI,KAAD,EAAQC,SAAR,CAAnB;IACH;EACJ;;EACD,MAAM,IAAIC,SAAJ,CAAc,CAACF,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAzB,IAAkCA,KAAnC,IAA4C,oBAA1D,CAAN;AACH"},"metadata":{},"sourceType":"module"}